/* Generated by Yosys 0.32+1 (git sha1 389b8d0f9, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os) */

(* top =  1  *)
(* src = "counter.v:1.1-37.10" *)
module Counter(clk, reset_n, count_to, count_inc, count_dec, load_en, flag_count_max, flag_count_min);
  (* src = "counter.v:15.3-30.6" *)
  wire [3:0] _00_;
  (* src = "counter.v:32.3-35.6" *)
  wire _01_;
  (* src = "counter.v:32.3-35.6" *)
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  (* src = "counter.v:2.14-2.17" *)
  input clk;
  wire clk;
  (* src = "counter.v:6.14-6.23" *)
  input count_dec;
  wire count_dec;
  (* src = "counter.v:5.14-5.23" *)
  input count_inc;
  wire count_inc;
  (* src = "counter.v:13.13-13.22" *)
  reg [3:0] count_max;
  (* src = "counter.v:4.20-4.28" *)
  input [3:0] count_to;
  wire [3:0] count_to;
  (* src = "counter.v:12.13-12.20" *)
  reg [3:0] counter;
  (* src = "counter.v:8.14-8.28" *)
  output flag_count_max;
  reg flag_count_max;
  (* src = "counter.v:9.14-9.28" *)
  output flag_count_min;
  reg flag_count_min;
  (* src = "counter.v:7.14-7.21" *)
  input load_en;
  wire load_en;
  (* src = "counter.v:3.14-3.21" *)
  input reset_n;
  wire reset_n;
  dti_55g_10t_invx1 _32_ (
    .A(count_dec),
    .Z(_05_)
  );
  dti_55g_10t_invx1 _33_ (
    .A(counter[3]),
    .Z(_06_)
  );
  dti_55g_10t_and2x1 _34_ (
    .A(load_en),
    .B(reset_n),
    .Z(_03_)
  );
  dti_55g_10t_and2x1 _35_ (
    .A(count_inc),
    .B(_05_),
    .Z(_07_)
  );
  dti_55g_10t_nand2x1 _36_ (
    .A(count_inc),
    .B(_05_),
    .Z(_08_)
  );
  dti_55g_10t_xor2x1 _37_ (
    .A(count_max[1]),
    .B(counter[1]),
    .Z(_09_)
  );
  dti_55g_10t_xor2x1 _38_ (
    .A(count_max[0]),
    .B(counter[0]),
    .Z(_10_)
  );
  dti_55g_10t_xor2x1 _39_ (
    .A(count_max[3]),
    .B(counter[3]),
    .Z(_11_)
  );
  dti_55g_10t_xor2x1 _40_ (
    .A(count_max[2]),
    .B(counter[2]),
    .Z(_12_)
  );
  dti_55g_10t_or3x1 _41_ (
    .A(_09_),
    .B(_10_),
    .C(_12_),
    .Z(_13_)
  );
  dti_55g_10t_nor2x1 _42_ (
    .A(_11_),
    .B(_13_),
    .Z(_01_)
  );
  dti_55g_10t_nor2x1 _43_ (
    .A(_08_),
    .B(_01_),
    .Z(_14_)
  );
  dti_55g_10t_or2x1 _44_ (
    .A(counter[0]),
    .B(counter[1]),
    .Z(_15_)
  );
  dti_55g_10t_nor3x1 _45_ (
    .A(counter[2]),
    .B(counter[3]),
    .C(_15_),
    .Z(_02_)
  );
  dti_55g_10t_nor3x1 _46_ (
    .A(count_inc),
    .B(_05_),
    .C(_02_),
    .Z(_16_)
  );
  dti_55g_10t_or3x1 _47_ (
    .A(load_en),
    .B(_14_),
    .C(_16_),
    .Z(_04_)
  );
  dti_55g_10t_nor2x1 _48_ (
    .A(load_en),
    .B(counter[0]),
    .Z(_00_[0])
  );
  dti_55g_10t_nand2x1 _49_ (
    .A(counter[1]),
    .B(_08_),
    .Z(_17_)
  );
  dti_55g_10t_xor2x1 _50_ (
    .A(counter[1]),
    .B(_08_),
    .Z(_18_)
  );
  dti_55g_10t_and2x1 _51_ (
    .A(counter[0]),
    .B(_18_),
    .Z(_19_)
  );
  dti_55g_10t_nand2x1 _52_ (
    .A(counter[0]),
    .B(_18_),
    .Z(_20_)
  );
  dti_55g_10t_nor2x1 _53_ (
    .A(counter[0]),
    .B(_18_),
    .Z(_21_)
  );
  dti_55g_10t_nor3x1 _54_ (
    .A(load_en),
    .B(_19_),
    .C(_21_),
    .Z(_00_[1])
  );
  dti_55g_10t_and2x1 _55_ (
    .A(_17_),
    .B(_20_),
    .Z(_22_)
  );
  dti_55g_10t_and2x1 _56_ (
    .A(counter[2]),
    .B(_07_),
    .Z(_23_)
  );
  dti_55g_10t_nor2x1 _57_ (
    .A(counter[2]),
    .B(_07_),
    .Z(_24_)
  );
  dti_55g_10t_nor2x1 _58_ (
    .A(_23_),
    .B(_24_),
    .Z(_25_)
  );
  dti_55g_10t_and2x1 _59_ (
    .A(_22_),
    .B(_25_),
    .Z(_26_)
  );
  dti_55g_10t_nor2x1 _60_ (
    .A(_22_),
    .B(_25_),
    .Z(_27_)
  );
  dti_55g_10t_nor3x1 _61_ (
    .A(load_en),
    .B(_26_),
    .C(_27_),
    .Z(_00_[2])
  );
  dti_55g_10t_nand3x1 _62_ (
    .A(counter[2]),
    .B(_07_),
    .C(_19_),
    .Z(_28_)
  );
  dti_55g_10t_nand3x1 _63_ (
    .A(_17_),
    .B(_20_),
    .C(_24_),
    .Z(_29_)
  );
  dti_55g_10t_nand2x1 _64_ (
    .A(_28_),
    .B(_29_),
    .Z(_30_)
  );
  dti_55g_10t_xor2x1 _65_ (
    .A(_06_),
    .B(_30_),
    .Z(_31_)
  );
  dti_55g_10t_nor2x1 _66_ (
    .A(load_en),
    .B(_31_),
    .Z(_00_[3])
  );
  (* src = "counter.v:15.3-30.6" *)
  always @(posedge clk)
    if (_03_) count_max[0] <= count_to[0];
  (* src = "counter.v:15.3-30.6" *)
  always @(posedge clk)
    if (_03_) count_max[1] <= count_to[1];
  (* src = "counter.v:15.3-30.6" *)
  always @(posedge clk)
    if (_03_) count_max[2] <= count_to[2];
  (* src = "counter.v:15.3-30.6" *)
  always @(posedge clk)
    if (_03_) count_max[3] <= count_to[3];
  (* src = "counter.v:32.3-35.6" *)
  always @(posedge clk)
    flag_count_max <= _01_;
  (* src = "counter.v:32.3-35.6" *)
  always @(posedge clk)
    flag_count_min <= _02_;
  (* src = "counter.v:15.3-30.6" *)
  always @(posedge clk, negedge reset_n)
    if (!reset_n) counter[0] <= 1'h0;
    else if (_04_) counter[0] <= _00_[0];
  (* src = "counter.v:15.3-30.6" *)
  always @(posedge clk, negedge reset_n)
    if (!reset_n) counter[1] <= 1'h0;
    else if (_04_) counter[1] <= _00_[1];
  (* src = "counter.v:15.3-30.6" *)
  always @(posedge clk, negedge reset_n)
    if (!reset_n) counter[2] <= 1'h0;
    else if (_04_) counter[2] <= _00_[2];
  (* src = "counter.v:15.3-30.6" *)
  always @(posedge clk, negedge reset_n)
    if (!reset_n) counter[3] <= 1'h0;
    else if (_04_) counter[3] <= _00_[3];
endmodule
